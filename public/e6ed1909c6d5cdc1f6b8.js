import"./style.css";import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import*as dat from"dat.gui";import{RectAreaLightHelper}from"three/examples/jsm/helpers/RectAreaLightHelper.js";const gui=new dat.GUI,canvas=document.querySelector("canvas.webgl"),fog=new THREE.Fog("#262837",1,15),scene=new THREE.Scene;scene.fog=fog;const textureLoader=new THREE.TextureLoader,wallsColorTexture=textureLoader.load("./textures/bricks/color.jpg"),wallsAmbientOcclusionTexture=textureLoader.load("./textures/bricks/ambientOcclusion.jpg"),wallsNormalTexture=textureLoader.load("./textures/bricks/normal.jpg"),wallsRoughnessTexture=textureLoader.load("./textures/bricks/roughness.jpg"),matcapTexture=textureLoader.load("./textures/door/color.jpg"),alphaTexture=textureLoader.load("./textures/door/alpha.jpg"),normalTexture=textureLoader.load("./textures/door/normal.jpg"),ambientOcclusionTexture=textureLoader.load("./textures/door/ambientOcclusion.jpg"),metalnessTexture=textureLoader.load("./textures/door/metalness.jpg"),roughnessTexture=textureLoader.load("./textures/door/roughness.jpg"),heightTexture=textureLoader.load("./textures/door/height.jpg"),grassColorTexture=textureLoader.load("./textures/grass/color.jpg"),grassAmbientOcclusionTexture=textureLoader.load("./textures/grass/ambientOcclusion.jpg"),grassNormalTexture=textureLoader.load("./textures/grass/normal.jpg"),grassRoughnessTexture=textureLoader.load("./textures/grass/roughness.jpg");grassColorTexture.repeat.set(8,8),grassAmbientOcclusionTexture.repeat.set(8,8),grassNormalTexture.repeat.set(8,8),grassRoughnessTexture.repeat.set(8,8),grassColorTexture.wrapT=THREE.RepeatWrapping,grassAmbientOcclusionTexture.wrapT=THREE.RepeatWrapping,grassNormalTexture.wrapT=THREE.RepeatWrapping,grassRoughnessTexture.wrapT=THREE.RepeatWrapping,grassColorTexture.wrapS=THREE.RepeatWrapping,grassAmbientOcclusionTexture.wrapS=THREE.RepeatWrapping,grassNormalTexture.wrapS=THREE.RepeatWrapping,grassRoughnessTexture.wrapS=THREE.RepeatWrapping;const house=new THREE.Group;scene.add(house);const wallWidth=4,wallHeight=2.5,windowWidth=.8,windowHeight=.8,doorWidth=1,doorHeight=2,frameThickness=.05,doorLeft=-.5,doorRight=.5,doorBottom=-1.25,windowCenterX=-1.2,windowCenterY=0,windowLeft=-1.6,windowRight=.4-1.2,windowBottom=-.4,windowTop=.4,windowRCenterX=1.2,windowRCenterY=0,windowRLeft=1.6,windowRRight=-(.4-1.2),windowRBottom=.4,windowRTop=-.4,wallShape=new THREE.Shape;wallShape.moveTo(-2,-1.25),wallShape.lineTo(2,-1.25),wallShape.lineTo(2,1.25),wallShape.lineTo(-2,1.25),wallShape.lineTo(-2,-1.25);const windowPathL=new THREE.Path;windowPathL.moveTo(-1.6,-.4),windowPathL.lineTo(windowRight,-.4),windowPathL.lineTo(windowRight,.4),windowPathL.lineTo(-1.6,.4),windowPathL.lineTo(-1.6,-.4);const windowPathR=new THREE.Path;windowPathR.moveTo(1.6,.4),windowPathR.lineTo(-windowRight,.4),windowPathR.lineTo(-windowRight,-.4),windowPathR.lineTo(1.6,-.4),windowPathR.lineTo(1.6,.4),wallShape.holes.push(windowPathL,windowPathR);const frontWallGeometry=new THREE.ShapeGeometry(wallShape),commonWallGeometry=new THREE.PlaneGeometry(4,2.5);wallsColorTexture.repeat.set(.5,.5),wallsColorTexture.wrapS=THREE.RepeatWrapping,wallsColorTexture.wrapT=THREE.RepeatWrapping,wallsAmbientOcclusionTexture.wrapS=wallsAmbientOcclusionTexture.wrapT=THREE.RepeatWrapping,wallsNormalTexture.wrapS=wallsNormalTexture.wrapT=THREE.RepeatWrapping,wallsRoughnessTexture.wrapS=wallsRoughnessTexture.wrapT=THREE.RepeatWrapping;const wallMaterial=new THREE.MeshStandardMaterial({side:THREE.DoubleSide,flatShading:!0,map:wallsColorTexture,aoMap:wallsAmbientOcclusionTexture,normalMap:wallsNormalTexture,roughness:wallsRoughnessTexture}),frontWall=new THREE.Mesh(frontWallGeometry,wallMaterial),leftWall=new THREE.Mesh(commonWallGeometry,wallMaterial),rightWall=new THREE.Mesh(commonWallGeometry,wallMaterial),backWall=new THREE.Mesh(commonWallGeometry,wallMaterial);frontWall.geometry.setAttribute("uv2",new THREE.Float32BufferAttribute(frontWall.geometry.attributes.uv.array,2)),frontWall.castShadow=!0,frontWall.position.y=1.25,frontWall.position.z=2,leftWall.castShadow=!0,leftWall.position.y=1.25,leftWall.position.z=0,leftWall.position.x=2,leftWall.rotation.y=Math.PI/2,rightWall.castShadow=!0,rightWall.position.y=1.25,rightWall.position.z=0,rightWall.position.x=-2,rightWall.rotation.y=Math.PI/2,backWall.castShadow=!0,backWall.position.y=1.25,backWall.position.z=-2,house.add(frontWall,leftWall,rightWall,backWall);const windowFrameGroupL=new THREE.Group,windowFrameGroupR=new THREE.Group;windowFrameGroupL.position.y=1.25,windowFrameGroupL.position.z=2,windowFrameGroupR.position.y=1.25,windowFrameGroupR.position.z=2;const frameMaterial=new THREE.MeshStandardMaterial({color:16777215,roughness:.3,metalness:.1}),outerFrameLShape=new THREE.Shape;outerFrameLShape.moveTo(-1.6-.05,-.45),outerFrameLShape.lineTo(windowRight+.05,-.45),outerFrameLShape.lineTo(windowRight+.05,.45),outerFrameLShape.lineTo(-1.6-.05,.45),outerFrameLShape.lineTo(-1.6-.05,-.45);const innerWindowPathL=new THREE.Path;innerWindowPathL.moveTo(-1.6,-.4),innerWindowPathL.lineTo(windowRight,-.4),innerWindowPathL.lineTo(windowRight,.4),innerWindowPathL.lineTo(-1.6,.4),innerWindowPathL.lineTo(-1.6,-.4),outerFrameLShape.holes.push(innerWindowPathL);const outerFrameLGeometry=new THREE.ShapeGeometry(outerFrameLShape),outerFrameL=new THREE.Mesh(outerFrameLGeometry,frameMaterial);outerFrameL.position.z=.01,windowFrameGroupL.add(outerFrameL);const middleBarWidth=.05,middleBarX=-1.2,middleBarGeometry=new THREE.BoxGeometry(.05,.8,.05),middleBar=new THREE.Mesh(middleBarGeometry,frameMaterial);middleBar.position.set(-1.2,0,.02),windowFrameGroupL.add(middleBar);const windowPaneMaterial=new THREE.MeshPhysicalMaterial({color:16777215,transmission:.95,roughness:.05,thickness:.01,envMapIntensity:1}),leftPaneWidth=.375,leftPaneGeometry=new THREE.PlaneGeometry(.35,.8-.1),leftPane=new THREE.Mesh(leftPaneGeometry,windowPaneMaterial);leftPane.position.set(-1.4125,0,.025),windowFrameGroupL.add(leftPane);const rightPaneGeometry=new THREE.PlaneGeometry(.35,.8-.1),rightPane=new THREE.Mesh(rightPaneGeometry,windowPaneMaterial);rightPane.position.set(windowRight-.1875,0,.025),windowFrameGroupL.add(rightPane);const outerFrameRShape=new THREE.Shape;outerFrameRShape.moveTo(-(-1.6-.05),.45),outerFrameRShape.lineTo(.7499999999999999,.45),outerFrameRShape.lineTo(.7499999999999999,-.45),outerFrameRShape.lineTo(-(-1.6-.05),-.45),outerFrameRShape.lineTo(-(-1.6-.05),.45);const innerWindowPathR=new THREE.Path;innerWindowPathR.moveTo(1.6,.4),innerWindowPathR.lineTo(-windowRight,.4),innerWindowPathR.lineTo(-windowRight,-.4),innerWindowPathR.lineTo(1.6,-.4),innerWindowPathR.lineTo(1.6,.4),outerFrameRShape.holes.push(innerWindowPathR);const outerFrameRGeometry=new THREE.ShapeGeometry(outerFrameRShape),outerFrameR=new THREE.Mesh(outerFrameRGeometry,frameMaterial);outerFrameR.position.z=.01,windowFrameGroupR.add(outerFrameR);const middleBarWidthR=.05,middleBarXR=1.2,middleBarGeometryR=new THREE.BoxGeometry(.05,.8,.05),middleBarR=new THREE.Mesh(middleBarGeometryR,frameMaterial);middleBarR.position.set(1.2,0,.02),windowFrameGroupR.add(middleBarR);const windowPaneMaterialR=new THREE.MeshPhysicalMaterial({color:16777215,transmission:.95,roughness:.05,thickness:.01,envMapIntensity:1}),leftPaneWidthR=.375,leftPaneGeometryR=new THREE.PlaneGeometry(.35,.8-.1),leftPaneR=new THREE.Mesh(leftPaneGeometryR,windowPaneMaterialR);leftPaneR.position.set(-1.4125,0,.025),windowFrameGroupR.add(leftPaneR);const rightPaneGeometryR=new THREE.PlaneGeometry(.35,.8-.1),rightPaneR=new THREE.Mesh(rightPaneGeometryR,windowPaneMaterial);rightPaneR.position.set(windowRight-.1875,0,.025),windowFrameGroupR.add(rightPaneR),house.add(windowFrameGroupL,windowFrameGroupR);const roof=new THREE.Mesh(new THREE.ConeGeometry(3.5,1.5,4),new THREE.MeshStandardMaterial({color:"#b35f45"}));roof.position.y=3,roof.rotation.y=Math.PI/4;const material=new THREE.MeshStandardMaterial;material.transparent=!0,material.map=matcapTexture,material.alphaMap=alphaTexture,material.normalMap=normalTexture,material.aoMap=ambientOcclusionTexture,material.aoMapIntensity=1,material.metalnessMap=metalnessTexture,material.displacementMap=heightTexture,material.displacementScale=.15,material.roughnessMap=roughnessTexture,material.normalMap=normalTexture;const door=new THREE.Mesh(new THREE.PlaneGeometry(2,2,100,100),material);door.geometry.setAttribute("uv2",new THREE.Float32BufferAttribute(door.geometry.attributes.uv.array,2)),door.position.y=.95,door.position.z=2.01;const bushGroup1=new THREE.Group,bushGroup2=new THREE.Group,bushGroup3=new THREE.Group,bushGroup4=new THREE.Group;bushGroup1.position.set(1.5,.3,2.5),bushGroup2.position.set(-1.5,.3,2.5),bushGroup3.position.set(-1,.3,2.5),bushGroup4.position.set(1,.3,2.5),bushGroup1.castShadow=!0,bushGroup2.castShadow=!0,bushGroup3.castShadow=!0,bushGroup4.castShadow=!0,gui.add(bushGroup2.position,"z").min(-2).max(2).step(.01);const bushMaterial=new THREE.MeshStandardMaterial({color:"#89c854"}),sphereCount=30,baseRadius=.2,bushRadius=.5,sizeVariation=.1;function createBush(e){const t=new THREE.Mesh(new THREE.SphereGeometry(.24,8,8),bushMaterial);e.add(t);for(let t=0;t<30;t++){const o=.2*(1+.1*(2*Math.random()-1)),a=new THREE.SphereGeometry(o,8,8),r=new THREE.MeshPhongMaterial({color:t%2==0?3899951:3171111}),n=new THREE.Mesh(a,r),i=Math.random()*Math.PI*2,s=Math.random()*Math.PI,h=.5*(.5+.5*Math.random());n.position.x=h*Math.sin(s)*Math.cos(i),n.position.y=h*Math.sin(s)*Math.sin(i),n.position.z=h*Math.cos(s),n.castShadow=!0;const l=.7+.6*Math.random();n.scale.set(l,l,l),e.add(n)}for(let t=0;t<15;t++){const t=.2*.8,o=new THREE.SphereGeometry(t,8,8),a=new THREE.Mesh(o,bushMaterial),r=Math.random()*Math.PI*2,n=Math.random()*Math.PI,i=.5*(.3+.3*Math.random());a.position.x=i*Math.sin(n)*Math.cos(r),a.position.y=i*Math.sin(n)*Math.sin(r),a.position.z=i*Math.cos(n),e.add(a)}}createBush(bushGroup1),createBush(bushGroup2),createBush(bushGroup3),createBush(bushGroup4);const graves=new THREE.Group,graveGeometry=new THREE.BoxGeometry(.6,.8,.2),graveMaterial=new THREE.MeshStandardMaterial({color:"#b2b6b1"});for(let e=0;e<30;e++){const e=2*Math.random()*Math.PI,t=4+5*Math.random(),o=Math.sin(e)*t,a=Math.cos(e)*t,r=new THREE.Mesh(graveGeometry,graveMaterial);r.position.set(o,.3,a),r.rotation.y=.4*(Math.random()-.5),r.rotation.z=.4*(Math.random()-.5),r.castShadow=!0,graves.add(r)}house.add(roof,door,bushGroup1,bushGroup2,bushGroup3,bushGroup4,graves);const floor=new THREE.Mesh(new THREE.PlaneGeometry(20,20),new THREE.MeshStandardMaterial({map:grassColorTexture,aoMap:grassAmbientOcclusionTexture,normalMap:grassNormalTexture,roughness:grassRoughnessTexture}));floor.geometry.setAttribute("uv2",new THREE.Float32BufferAttribute(door.geometry.attributes.uv.array,2)),floor.rotation.x=.5*-Math.PI,floor.position.y=0,floor.receiveShadow=!0,scene.add(floor);const ambientLight=new THREE.AmbientLight("#b9d5ff",.12);scene.add(ambientLight);const moonLight=new THREE.DirectionalLight("#ffffff",.2);moonLight.position.set(4,5,-2),gui.add(moonLight.position,"x").min(0).max(7).step(.01),scene.add(moonLight);const doorLammGeometry=new THREE.SphereGeometry(.1,8,8);doorLammGeometry.thetaStart=4.66,doorLammGeometry.thetaLength=3.3;const doorLamp=new THREE.Mesh(doorLammGeometry,new THREE.MeshStandardMaterial({color:"#ffffff"}));doorLamp.position.set(0,2.257,2.257);const doorLight=new THREE.PointLight("#ff7d46",1,7);doorLight.position.set(0,1.8,2.257),house.add(doorLamp,doorLight);const innerLight=new THREE.PointLight("#fa3002",10,7);innerLight.position.set(0,.54,0);const width=1,height=1,intensity=10,innerLight2=new THREE.RectAreaLight("#fa3002",10,1,1);innerLight2.position.set(.13,1.65,.42),innerLight2.lookAt(0,0,0);const rectLightHelper=new RectAreaLightHelper(innerLight2);innerLight2.add(rectLightHelper),gui.add(innerLight2.position,"x").min(-7).max(7).step(.01),gui.add(innerLight2.position,"y").min(-7).max(7).step(.01),gui.add(innerLight2.position,"z").min(-7).max(7).step(.01),house.add(innerLight,innerLight2);const windowFrontLeft=new THREE.Group,ghost1=new THREE.PointLight("#ff00ff",2,3),ghost2=new THREE.PointLight("#00ffff",2,3),ghost3=new THREE.PointLight("#ffff00",2,3);scene.add(ghost1,ghost2,ghost3);const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,100);camera.position.x=4,camera.position.y=2,camera.position.z=5,scene.add(camera);const controls=new OrbitControls(camera,canvas);controls.enableDamping=!0;const renderer=new THREE.WebGLRenderer({canvas});renderer.setClearColor("#262837"),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,moonLight.castShadow=!0,doorLight.castShadow=!0,ghost1.castShadow=!0,ghost2.castShadow=!0,ghost2.castShadow=!0;const clock=new THREE.Clock,tick=()=>{const e=clock.getElapsedTime(),t=.5*e;ghost1.position.x=4*Math.cos(t),ghost1.position.z=4*Math.sin(t),ghost1.position.y=3*Math.sin(t);const o=.32*-e;ghost2.position.x=5*Math.cos(o),ghost2.position.z=5*Math.sin(o),ghost2.position.y=4*Math.sin(o)+Math.sin(2.5*e);const a=.18*-e;ghost3.position.x=Math.cos(a)*(7+Math.sin(.32*e)),ghost3.position.z=Math.sin(a)*(7+Math.sin(.5*e)),ghost3.position.y=Math.sin(a)*(7+Math.sin(2.5*e)),controls.update(),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();const flickerParams={minIntensity:.5,maxIntensity:1.5,speed:.05,probability:.7};function animate(){requestAnimationFrame(animate),Math.random()<.1&&(doorLight.intensity=1.5*Math.random()),renderer.render(scene,camera)}animate();